<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>GitHub on クラウドCoEの何でも屋</title><link>https://chacco38.github.io/tags/github/</link><description>Recent content in GitHub on クラウドCoEの何でも屋</description><generator>Hugo -- gohugo.io</generator><language>ja-jp</language><copyright>&amp;copy; 2022 Satoshi Matsuzawa</copyright><lastBuildDate>Tue, 07 Dec 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://chacco38.github.io/tags/github/index.xml" rel="self" type="application/rss+xml"/><item><title>GHEC Audit Log CLI を使って GitHub Enterprise Cloud の監査ログを取得してみた</title><link>https://chacco38.github.io/posts/2021/12/ghec-audit-log-cli/</link><pubDate>Tue, 07 Dec 2021 00:00:00 +0000</pubDate><guid>https://chacco38.github.io/posts/2021/12/ghec-audit-log-cli/</guid><description>はじめに みなさん、こんにちは。今回は GitHub Enterprise Cloud(GHEC) の監査ログ(Audit Log) の取得方法についてのお話です。
GHEC 監査ログの取得方法としてはいくつか方法はあるのですが、この記事では GHEC の監査ログを取得するためのコマンドラインインタフェースである GHEC Audit Log CLI を使った方法をご紹介していきたいと思います。
https://github.com/github/ghec-audit-log-cli
GHEC Audit Log CLI を使ってみよう 今回は Linux(AWS CloudShell) 上に環境を作って試しに実行してみるところからはじめて、定期的に監査ログ取得を行う自動化フローの構築まで紹介していきたいと思います。
ローカル環境で実行してみよう Step1. 前提パッケージのインストール GHEC Audit Log CLI の前提パッケージとして Node.js が必要となります。GitHub からソースコードを入手する必要があるため、git コマンドと併せてインストールしましょう。
前提パッケージの導入 $ curl --silent --location https://rpm.nodesource.com/setup_16.x | sudo bash - $ sudo yum install -y nodejs git Step2. GHEC Audit Log CLI のインストール GitHub からソースコードを取得し、npm コマンドを使って GHEC Audit Log CLI をインストールします。最後の ghce-audit-log-cli -v コマンドにてバージョン情報が出力されれば CLI のインストールは完了です。</description></item><item><title>Microsoft Sentinel を使って GitHub Enterprise Cloud のセキュリティを強化しよう (Azure Logic Apps コネクタ編)</title><link>https://chacco38.github.io/posts/2021/11/azure-sentinel-logicapps-data-connector-for-ghec/</link><pubDate>Fri, 26 Nov 2021 00:00:00 +0000</pubDate><guid>https://chacco38.github.io/posts/2021/11/azure-sentinel-logicapps-data-connector-for-ghec/</guid><description>はじめに みなさん、こんにちは。今回は GitHub Enterprise Cloud(GHEC) の各種ログを SIEM1 マネージドサービスである Microsoft Sentinel (旧称 Azure Sentinel) に集約し、サイバー攻撃の兆候を検知できるようにする方法をご紹介していきたいと思います。
Microsoft Sentinel と GHEC との連携方法はいくつかあるのですが、この記事では Microsoft Sentinel コミュニティで開発している Azure Logic Apps(ロジックアプリ)、Azure Functions(関数アプリ)の 2 種類のカスタムデータコネクタの内、「Azure Logic Apps コネクタ」を使った方法をご紹介していきたいと思います。
これから GHEC の利用を検討している方や、GHEC は利用しているけれど SIEM システムの導入まではしていないという方は、セキュリティ強化策のひとつとして参考にしてみてはいかがでしょうか。
構築するシステムについて 今回は Azure Logic Apps(ロジックアプリ)を定期的に起動し、GHEC から監査ログなどを取得して Microsoft Sentinel ワークスペースへ格納、格納されたログに対して Microsoft Sentinel が自動的に相関分析をかけていく、といった流れで処理を行うシステムを構築していきたいと思います。
Azure Sentinel とのコネクタについては、今回は Microsoft Sentinel コミュニティで公開されている次のカスタムデータコネクタを利用していきます。
https://github.com/Azure/Azure-Sentinel/tree/master/DataConnectors/GitHub
本カスタムコネクタをデプロイすると、次の 3 種類の Azure Logic Apps リソースが動作するようになります。
リソース種別 説明 Audit Playbook 監査ログを定期的に収集する自動ワークフロー (デフォルト 5 分間隔) Repo Playbook 各リポジトリに対するフォーク、クローン、コミットなどの操作ログを定期的に収集する自動ワークフロー (デフォルト 1 時間間隔) Vulnerability Alert Playbook 各リポジトリに対するセキュリティ脆弱性診断ログを定期的に収集する自動ワークフロー (デフォルト 1 日間隔) また、本カスタムコネクタで取得した各種ログデータについては、Log Analytics ワークスペースの次のカスタムテーブルへ格納されるようになります。</description></item><item><title>Microsoft Sentinel を使って GitHub Enterprise Cloud のセキュリティを強化しよう (Azure Functions コネクタ編)</title><link>https://chacco38.github.io/posts/2021/11/azure-sentinel-functions-data-connector-for-ghec/</link><pubDate>Thu, 25 Nov 2021 00:00:00 +0000</pubDate><guid>https://chacco38.github.io/posts/2021/11/azure-sentinel-functions-data-connector-for-ghec/</guid><description>はじめに みなさん、こんにちは。今回は GitHub Enterprise Cloud(GHEC) の各種ログを SIEM1 マネージドサービスである Microsoft Sentinel (旧称 Azure Sentinel) に集約し、サイバー攻撃の兆候を検知できるようにする方法をご紹介していきたいと思います。
Microsoft Sentinel と GHEC との連携方法はいくつかあるのですが、この記事では Microsoft Sentinel コミュニティで開発している Azure Logic Apps(ロジックアプリ)、Azure Functions(関数アプリ)の 2 種類のカスタムデータコネクタの内、「Azure Functions コネクタ」を使った方法をご紹介していきたいと思います。
これから GHEC の利用を検討している方や、GHEC は利用しているけれど SIEM システムの導入まではしていないという方は、セキュリティ強化策のひとつとして参考にしてみてはいかがでしょうか。
構築するシステムについて 今回は Azure Functions(関数アプリ)を定期的に起動し、GHEC から監査ログなどを取得して Microsoft Sentinel ワークスペースへ格納、格納されたログに対して Microsoft Sentinel が自動的に相関分析をかけていく、といった流れで処理を行うシステムを構築していきたいと思います。
Azure Sentinel とのコネクタについては、今回は Microsoft Sentinel コミュニティで公開されている次のカスタムデータコネクタを利用していきます。
https://github.com/Azure/Azure-Sentinel/blob/master/DataConnectors/GithubFunction
本カスタムコネクタで取得した各種ログデータについては、Log Analytics ワークスペースの次のカスタムテーブルへ格納されるようになります。
テーブル名 説明 GitHub_CL 監査ログのデータを格納するテーブル GitHubRepoLogs_CL 各リポジトリに対するフォーク、クローン、コミットなどの操作ログやリポジトリに対するセキュリティ脆弱性診断ログのデータを格納するテーブル それでは構築していきましょう 今回は GitHub Enterprise Cloud → Microsoft Sentinel ワークスペース → カスタムコネクタ → Microsoft Sentinel の順で設定していきます。</description></item></channel></rss>